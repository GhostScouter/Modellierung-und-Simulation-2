/*

Vector SparseMatrix::operator*(Vector v) const
{
	double temporaryResult = 0;						// used in the core of the calculation to sum up entries of result vector
	Vector gatherResults = Vector(v.vectorSize);	// build result vector to be altered and then returned
	size_t counter = 0;

    for (int i = 0; i < vectorSize; ++i){	// pass through the vector representation of SparseMatrix

		temporaryResult = temporaryResult + values[i] * v.vector[colInds[i]];	// perform calculation


		if (counter == capacity){			// we reached a new row!

			gatherResults.vector[i] = temporaryResult;		// put result into result vector
			temporaryResult = 0;							// reset the temporaryResult so the next calculation can take place
			counter = 0;					// reset counter since new row
		}

	counter ++;

	}

	return gatherResults;
}

*/